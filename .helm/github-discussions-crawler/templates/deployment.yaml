apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      tier: backend
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        tier: backend
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ template "fullname" . }}-account
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.dockerhub.username }}/{{ .Values.service.name }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: GITHUB_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: github
              key: api-token
        - name: SLACK_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: slack
              key: api-token
        - name: SLACK_DEFAULT_PUBLISH_CHANNEL
          value: "{{ .Values.slack.default_publish_channel }}"
        - name: DATABASE_JDBC_URL
          valueFrom:
            secretKeyRef:
              name: database
              key: jdbc-url
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: database
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: password
        - name: HTTP_PORT
          value: "{{ .Values.service.httpPort }}"
        ports:
        - containerPort: {{ .Values.service.httpPort }}
        livenessProbe:
          initialDelaySeconds: 30
          httpGet:
            path: {{ .Values.service.probe.livenessPath }}
            port: {{ .Values.service.httpPort }}
        resources:
{{ toYaml .Values.resources | indent 14 }}
